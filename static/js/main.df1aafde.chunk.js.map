{"version":3,"sources":["Tmdb.js","components/MovieRow.jsx","components/FeaturedMovie.jsx","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","response","json","data","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","className","results","length","map","originalTitle","original_title","posterPath","poster_path","src","alt","FeaturedMovie","item","firstDate","Date","first_air_date","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","App","useState","movieList","setMovieList","featuredData","setFeaturedData","useEffect","Tmdb","list","originals","filter","randomChosen","Math","floor","random","chosen","id","chosenInfo","loadAll","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df1aafde.chunk.js","sourcesContent":["const API_KEY = '01bcd4a55bbe8448bfe6be169546216a';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\nconst basicFetch = async (endpoint) => {\n  const response = await fetch(`${API_BASE}${endpoint}`);\n  const data = await response.json();\n  return data;\n};\n\nexport default {\n  getHomeList: async () => [\n    {\n      slug: 'originals',\n      title: 'Originais do Netflix',\n      items: await basicFetch(\n        `/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`,\n      ),\n    }, {\n      slug: 'trending',\n      title: 'Recomendados para Você',\n      items: await basicFetch(\n        `/trending/all/week?language=pt-BR&api_key=${API_KEY}`,\n      ),\n    }, {\n      slug: 'toprated',\n      title: 'Em Alta',\n      items: await basicFetch(\n        `/movie/top_rated?language=pt-BR&api_key=${API_KEY}`,\n      ),\n    }, {\n      slug: 'action',\n      title: 'Ação',\n      items: await basicFetch(\n        `/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`,\n      ),\n    }, {\n      slug: 'comecy',\n      title: 'Comédia',\n      items: await basicFetch(\n        `/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`,\n      ),\n    }, {\n      slug: 'horror',\n      title: 'Terror',\n      items: await basicFetch(\n        `/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`,\n      ),\n    }, {\n      slug: 'romance',\n      title: 'Romance',\n      items: await basicFetch(\n        `/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`,\n      ),\n    }, {\n      slug: 'documentary',\n      title: 'Documentários',\n      items: await basicFetch(\n        `/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`,\n      ),\n    },\n  ],\n\n  getMovieInfo: async (movieId, type) => {\n    let info = {};\n\n    if (movieId) {\n      switch (type) {\n        case 'movie':\n          info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n          break;\n        case 'tv':\n          info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n          break;\n        default:\n          info = null;\n      }\n    }\n\n    return info;\n  },\n};\n","import React from 'react';\nimport './MovieRow.css';\nimport PropTypes from 'prop-types';\n\nconst MovieRow = ({ title, items }) => (\n  <div className=\"movieRow\">\n    <h2>{title}</h2>\n    <div className=\"movieRow--listarea\">\n      <div className=\"movieRow--list\">\n        {items.results.length > 0 && items.results\n          .map(({ original_title: originalTitle, poster_path: posterPath }) => (\n            <div key={originalTitle} className=\"movieRow--item\">\n              <img src={`https://image.tmdb.org/t/p/w300${posterPath}`} alt={originalTitle} />\n            </div>\n          ))}\n      </div>\n\n    </div>\n  </div>\n);\n\nMovieRow.propTypes = {\n  title: PropTypes.string,\n}.isRequired;\n\nexport default MovieRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FeaturedMovie.css';\n\nconst FeaturedMovie = ({ item }) => {\n  const firstDate = new Date(item.first_air_date);\n\n  return (\n    <section\n      className=\"featured\"\n      style={{\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\n      }}\n    >\n      <div className=\"featured--vertical\">\n        <div className=\"featured--horizontal\">\n          <div className=\"featured--name\">{item.original_name}</div>\n          <div className=\"featured--info\">\n            <div className=\"featured--points\">{item.vote_average}</div>\n            <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n            <div className=\"featured--seasons\">\n              {item.number_of_seasons}\n              {' '}\n              temporada\n              {item.number_of_seasons !== 1 ? 's' : ''}\n            </div>\n          </div>\n          <div className=\"featured--description\">{item.overview}</div>\n          <div className=\"featured--buttons\">\n            a\n          </div>\n          <div className=\"featured--genres\">\n            <strong>Gêneros:</strong>\n            {' '}\n            ...\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nFeaturedMovie.propTypes = {\n  item: PropTypes.object,\n}.isRequired;\n\nexport default FeaturedMovie;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\n\nfunction App() {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      const list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      const originals = list.filter(({ slug }) => slug === 'originals');\n      const randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      const chosen = originals[0].items.results[randomChosen];\n      const chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n\n  return (\n    <div className=\"page\">\n      {featuredData\n      && <FeaturedMovie item={featuredData} />}\n\n      <section className=\"lists\">\n        {movieList.map(({ title, items }) => (\n          <MovieRow key={title} title={title} items={items} />\n        ))}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}